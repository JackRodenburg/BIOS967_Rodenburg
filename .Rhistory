#nlkprint(diversity_plot)
filtered_data <- diversity_data_extend %>%
filter(Date >= "2011-01-01" & Date <= "2013-12-31")
diversity_plot <- ggplot(filtered_data, aes(x = Date, group = SeasonGroup)) +
#geom_line(aes(y = Shannon, color = "Shannon")) +
#geom_line(aes(y = Richness/10, color = "Richness")) +
geom_line(aes(y = Simpson, color = "Simpson")) +
labs(x = "Year", y = "Diversity") +
ggtitle("Diversity Indeces Over Time")
# Print the plot
print(diversity_plot)
# Filter data for the desired time range (2010-2014)
# Print the plot
#nlkprint(diversity_plot)
filtered_data <- diversity_data_extend %>%
filter(Date >= "2011-01-01" & Date <= "2013-12-31")
diversity_plot <- ggplot(filtered_data, aes(x = Date, group = SeasonGroup)) +
geom_smooth(aes(y = Shannon, color = "Shannon")) +
geom_line(aes(y = Richness/10, color = "Richness")) +
geom_line(aes(y = Simpson, color = "Simpson")) +
labs(x = "Year", y = "Diversity") +
ggtitle("Diversity Indeces Over Time")
# Print the plot
print(diversity_plot)
# Filter data for the desired time range (2010-2014)
# Print the plot
#nlkprint(diversity_plot)
filtered_data <- diversity_data_extend %>%
filter(Date >= "2011-01-01" & Date <= "2013-12-31")
diversity_plot <- ggplot(filtered_data, aes(x = Date, group = SeasonGroup)) +
geom_smooth(aes(y = Shannon, color = "Shannon")) +
geom_smooth(aes(y = Richness/10, color = "Richness")) +
geom_smooth(aes(y = Simpson, color = "Simpson")) +
labs(x = "Year", y = "Diversity") +
ggtitle("Diversity Indeces Over Time")
# Print the plot
print(diversity_plot)
# Filter data for the desired time range (2010-2014)
# Print the plot
#nlkprint(diversity_plot)
filtered_data <- diversity_data_extend %>%
filter(Date >= "2011-01-01" & Date <= "2013-12-31")
diversity_plot <- ggplot(filtered_data, aes(x = Date, group = SeasonGroup)) +
geom_line(aes(y = Shannon, color = "Shannon")) +
geom_smooth(aes(y = Richness/10, color = "Richness")) +
geom_smooth(aes(y = Simpson, color = "Simpson")) +
labs(x = "Year", y = "Diversity") +
ggtitle("Diversity Indeces Over Time")
# Print the plot
print(diversity_plot)
# Filter data for the desired time range (2010-2014)
# Print the plot
#nlkprint(diversity_plot)
filtered_data <- diversity_data_extend %>%
filter(Date >= "2011-01-01" & Date <= "2013-12-31")
diversity_plot <- ggplot(filtered_data, aes(x = Date, group = SeasonGroup)) +
geom_smooth(aes(y = Shannon, color = "Shannon")) +
geom_smooth(aes(y = Richness/10, color = "Richness")) +
geom_smooth(aes(y = Simpson, color = "Simpson")) +
labs(x = "Year", y = "Diversity") +
ggtitle("Diversity Indeces Over Time")
# Print the plot
print(diversity_plot)
# Filter data for the desired time range (2010-2014)
# Print the plot
#nlkprint(diversity_plot)
filtered_data <- diversity_data_extend %>%
filter(Date >= "2007-01-01" & Date <= "2017-12-31")
diversity_plot <- ggplot(filtered_data, aes(x = Date, group = SeasonGroup)) +
geom_smooth(aes(y = Shannon, color = "Shannon")) +
geom_smooth(aes(y = Richness/10, color = "Richness")) +
geom_smooth(aes(y = Simpson, color = "Simpson")) +
labs(x = "Year", y = "Diversity") +
ggtitle("Diversity Indeces Over Time")
# Print the plot
print(diversity_plot)
# Filter data for the desired time range (2010-2014)
# Print the plot
#nlkprint(diversity_plot)
#yearly_avg_diversity <- diversity_data_extend %>%
#mutate(Year = year(Date)) %>%  # Extracts the year from the Date
# group_by(Year, Season, Subcategory) %>%
#summarise(AvgShannon = mean(Shannon, na.rm = TRUE))
#plot <- ggplot(yearly_avg_diversity, aes(x = Year, y = AvgShannon, color = Subcategory)) +
#geom_point() +  # You can use geom_line() if you prefer to connect the points
# geom_smooth(method = "loess", se = FALSE) +  # Adds a smoothed line through the points
#labs(x = "Year", y = "Average Shannon Diversity", title = "Yearly Average Shannon Diversity by Subcategory") +
# theme_minimal()
#print(plot)
diversity_plot <- ggplot(filtered_data, aes(x = Date, group = SeasonGroup)) +
geom_smooth(aes(y = Shannon, color = Season)) +  # Color by Season
scale_color_manual(values = c("Spring" = "green4", "Summer" = "yellow4", "Fall" = "brown4")) +
labs(x = "Year", y = "Diversity", color = "Season") +
ggtitle("Diversity Indices Over Time") +
theme_minimal()
print(diversity_plot)
filtered_data_segment <- diversity_data_extend %>%
filter(Date >= "2011-01-01" & Date <= "2014-01-01") %>%
filter(!Segment %in% c("PMC", "ELK"))
segment_plot <- ggplot(filtered_data_segment, aes(x = Date, y = Shannon, group = interaction(SeasonGroup, Segment), color = Segment)) +
geom_point() +
geom_smooth() +
labs(x = "Date", y = "Shannon Diversity", color = "Segment") +
ggtitle("Shannon Diversity by Segment and SeasonGroup Over Time") +
theme_minimal()
# Print the plot
print(segment_plot)
#yearly_avg_diversity <- diversity_data_extend %>%
#mutate(Year = year(Date)) %>%  # Extracts the year from the Date
# group_by(Year, Season, Subcategory) %>%
#summarise(AvgShannon = mean(Shannon, na.rm = TRUE))
#plot <- ggplot(yearly_avg_diversity, aes(x = Year, y = AvgShannon, color = Subcategory)) +
#geom_point() +  # You can use geom_line() if you prefer to connect the points
# geom_smooth(method = "loess", se = FALSE) +  # Adds a smoothed line through the points
#labs(x = "Year", y = "Average Shannon Diversity", title = "Yearly Average Shannon Diversity by Subcategory") +
# theme_minimal()
#print(plot)
diversity_plot <- ggplot(filtered_data, aes(x = Date, group = SeasonGroup)) +
geom_smooth(aes(y = Shannon, color = Season)) +  # Color by Season
scale_color_manual(values = c("Spring" = "green4", "Summer" = "yellow4", "Fall" = "brown4")) +
labs(x = "Year", y = "Diversity", color = "Season") +
ggtitle("Diversity Indices Over Time") +
theme_minimal()
print(diversity_plot)
filtered_data_segment <- diversity_data_extend %>%
filter(Date >= "2011-01-01" & Date <= "2014-01-01") %>%
filter(!Segment %in% c("PMC", "ELK"))
segment_plot <- ggplot(filtered_data_segment, aes(x = Date, y = Shannon, group = interaction(SeasonGroup, Segment), color = Segment)) +
#geom_point() +
geom_smooth() +
labs(x = "Date", y = "Shannon Diversity", color = "Segment") +
ggtitle("Shannon Diversity by Segment and SeasonGroup Over Time") +
theme_minimal()
# Print the plot
print(segment_plot)
fish_vegan
# Step 1: Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Step 2: Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Step 3: Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Step 1: Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Step 2: Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Step 3: Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Calculate Jaccard Distance
jaccard_dist <- vegdist(fish_vegan_pa_aggregated, method = "jaccard")
str(fish_vegan_pa_aggregated)
# Step 1: Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Step 2: Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Step 3: Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
jaccard_numeric_data <- fish_vegan_pa_aggregated %>% select(-Segment)
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Calculate Jaccard Distance
jaccard_dist <- vegdist(jaccard_numeric_data, method = "jaccard")
# View the Jaccard Distance matrix
print(jaccard_dist)
# Step 1: Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Step 2: Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Step 3: Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
jaccard_numeric_data <- fish_vegan_pa_aggregated %>% select(-Segment)
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Calculate Jaccard Distance
jaccard_dist <- vegdist(jaccard_numeric_data, method = "jaccard")
# View the Jaccard Distance matrix
print(jaccard_dist)
# Hierarchical clustering
hc <- hclust(jaccard_dist)
# Plot dendrogram
plot(hc)
# Step 1: Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Step 2: Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Step 3: Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
jaccard_numeric_data <- fish_vegan_pa_aggregated %>% select(-Segment)
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Calculate Jaccard Distance
jaccard_dist <- vegdist(jaccard_numeric_data, method = "jaccard")
# View the Jaccard Distance matrix
print(jaccard_dist)
# Run MDS
mds <- metaMDS(jaccard_dist)
# Plot MDS
plot(mds)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) #useful functions to make plots
library(dplyr)
library(popdemo) #matrix modeling library
library(vegan)
library(lubridate)
library(tidyr)
library(scales)
library(reshape2)
install.packages("reshape2")
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) #useful functions to make plots
library(dplyr)
library(popdemo) #matrix modeling library
library(vegan)
library(lubridate)
library(tidyr)
library(scales)
library(reshape2)
# Step 1: Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Step 2: Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Step 3: Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
jaccard_numeric_data <- fish_vegan_pa_aggregated %>% select(-Segment)
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Calculate Jaccard Distance
jaccard_dist <- vegdist(jaccard_numeric_data, method = "jaccard")
# View the Jaccard Distance matrix
print(jaccard_dist)
# Convert the distance matrix to a format suitable for ggplot
melted_jaccard_dist <- melt(as.matrix(jaccard_dist))
# Create heatmap
ggplot(melted_jaccard_dist, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(x = "Segment", y = "Segment", fill = "Jaccard Distance") +
theme_minimal()
# Step 1: Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Step 2: Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Step 3: Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
jaccard_numeric_data <- fish_vegan_pa_aggregated %>% select(-Segment)
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Calculate Jaccard Distance
jaccard_dist <- vegdist(jaccard_numeric_data, method = "jaccard")
# View the Jaccard Distance matrix
print(jaccard_dist)
# Convert the distance matrix to a format suitable for ggplot
melted_jaccard_dist <- melt(as.matrix(jaccard_dist))
# Create heatmap
ggplot(melted_jaccard_dist, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(x = "Segment", y = "Segment", fill = "Jaccard Distance") +
theme_minimal()
# Step 1: Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Step 2: Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Step 3: Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
jaccard_numeric_data <- fish_vegan_pa_aggregated %>% select(-Segment)
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Calculate Jaccard Distance
jaccard_dist <- vegdist(jaccard_numeric_data, method = "jaccard")
# View the Jaccard Distance matrix
print(jaccard_dist)
# Convert the distance matrix to a format suitable for ggplot
melted_jaccard_dist <- melt(as.matrix(jaccard_dist))
# Create heatmap
ggplot(melted_jaccard_dist, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black") +
labs(x = "Segment", y = "Segment", fill = "Jaccard Distance") +
theme_minimal()
fish_vegan_pa_aggregated
# Step 1: Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Step 2: Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Step 3: Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
jaccard_numeric_data <- fish_vegan_pa_aggregated %>% select(-Segment)
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Calculate Jaccard Distance
jaccard_dist <- vegdist(jaccard_numeric_data, method = "jaccard")
# View the Jaccard Distance matrix
print(jaccard_dist)
# Convert the distance matrix to a format suitable for ggplot
melted_jaccard_dist <- melt(as.matrix(jaccard_dist))
# Create heatmap
ggplot(melted_jaccard_dist, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black") +
labs(x = "Segment", y = "Segment", fill = "Jaccard Distance") +
theme_minimal()
# 1. CP
# 2. ELK
# 3. LLP
# 4. PMC
# 5. ULP
# let's try to remove 4 and 2, aka ELK and PMC.
# Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
filter(!Segment %in% c("ELK", "PMC")) %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
jaccard_numeric_data <- fish_vegan_pa_aggregated %>% select(-Segment)
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Calculate Jaccard Distance
jaccard_dist <- vegdist(jaccard_numeric_data, method = "jaccard")
# View the Jaccard Distance matrix
print(jaccard_dist)
# Convert the distance matrix to a format suitable for ggplot
melted_jaccard_dist <- melt(as.matrix(jaccard_dist))
# Create heatmap
ggplot(melted_jaccard_dist, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black") +
labs(x = "Segment", y = "Segment", fill = "Jaccard Distance") +
theme_minimal()
# 1. CP
# 2. ELK
# 3. LLP
# 4. PMC
# 5. ULP
# let's try to remove 4 and 2, aka ELK and PMC.
# Convert counts to presence/absence
fish_vegan_pa <- fish_vegan %>%
mutate(across(-sample_id, ~ ifelse(. > 0, 1, 0)))  # Convert counts to 1 (presence) or 0 (absence) for all species columns
# Separate Segment from sample_id
fish_vegan_pa <- fish_vegan_pa %>%
separate(sample_id, into = c("Segment", "Year", "Month", "Day"), sep = "-") %>%
filter(!Segment %in% c("ELK", "PMC")) %>%
select(-Year, -Month, -Day)  # Remove date parts if only segment comparison is needed
# Aggregate by Segment
fish_vegan_pa_aggregated <- fish_vegan_pa %>%
group_by(Segment) %>%
summarise(across(everything(), max))  # Aggregate by taking the maximum (presence/absence) across all species
jaccard_numeric_data <- fish_vegan_pa_aggregated %>% select(-Segment)
# Now, 'fish_vegan_pa_aggregated' is ready for Jaccard index calculation
# Set row names to Segment names for Jaccard Distance calculation
row.names(jaccard_numeric_data) <- fish_vegan_pa_aggregated$Segment
# Calculate Jaccard Distance
jaccard_dist <- vegdist(jaccard_numeric_data, method = "jaccard")
# View the Jaccard Distance matrix
print(jaccard_dist)
# Convert the distance matrix to a format suitable for ggplot
melted_jaccard_dist <- melt(as.matrix(jaccard_dist))
# Create heatmap
ggplot(melted_jaccard_dist, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black") +
labs(x = "Segment", y = "Segment", fill = "Jaccard Distance") +
theme_minimal()
# 1. CP
# 2. ELK
# 3. LLP
# 4. PMC
# 5. ULP
# let's try to remove 4 and 2, aka ELK and PMC.
platte_fish_extended
unique(platte_fish_extended$Count)
platte_fish_extended
library(dplyr)
library(ggplot2)
# Calculate average length per year for native and nonnative species
average_length_yearly <- platte_fish_extended %>%
group_by(Year, Origin) %>%
summarise(AverageLength = mean(Length, na.rm = TRUE)) %>%
ungroup()
# Plotting
length_plot <- ggplot(average_length_yearly, aes(x = Year, y = AverageLength, color = Origin, group = Origin)) +
geom_line() +
scale_color_manual(values = c("Nat" = "blue", "Non" = "red")) +
labs(x = "Year", y = "Average Length", color = "Origin", title = "Average Length Over Time by Origin") +
theme_minimal()
# Print the plot
print(length_plot)
# Calculate average length per year for native and nonnative species
average_weight_yearly <- platte_fish_extended %>%
group_by(Year, Origin) %>%
summarise(AverageWeight = mean(Weight, na.rm = TRUE)) %>%
ungroup()
# Plotting
weight_plot <- ggplot(average_weight_yearly, aes(x = Year, y = AverageWeight, color = Origin, group = Origin)) +
geom_line() +
scale_color_manual(values = c("Nat" = "blue", "Non" = "red")) +
labs(x = "Year", y = "Average Weight", color = "Origin", title = "Average Weight Over Time by Origin") +
theme_minimal()
# Print the plot
print(weight_plot)
View(fish_vegan)
View(platte_fish_extended)
numeric_data_scaled <- scale(numeric_data)
numeric_data_scaled <- scale(numeric_data)
distance_matrix <- dist(numeric_data_scaled, method = "euclidean")
hc <- hclust(distance_matrix)
clusters <- cutree(hc, k = 5) # for example, creating 5 clusters
plot(hc)
numeric_data_scaled <- scale(numeric_data)
distance_matrix <- dist(numeric_data_scaled, method = "euclidean")
hc <- hclust(distance_matrix)
clusters <- cutree(hc, k = 5) # for example, creating 5 clusters
plot(hc)
numeric_data_scaled$Cluster <- as.factor(clusters)
long_data <- melt(numeric_data_scaled, id.vars = "Cluster")
ggplot(long_data, aes(x = variable, y = reorder(sample_id, Cluster), fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-3, 3), space = "Lab",
name="Scaled\nAbundance") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Species", y = "Sample", title = "Heatmap of Fish Species Abundance by Cluster")
numeric_data_scaled <- scale(numeric_data)
distance_matrix <- dist(numeric_data_scaled, method = "euclidean")
hc <- hclust(distance_matrix)
clusters <- cutree(hc, k = 5) # for example, creating 5 clusters
plot(hc)
numeric_data_scaled$Cluster <- as.factor(clusters)
long_data <- melt(numeric_data_scaled, id.vars = "Cluster")
ggplot(long_data, aes(x = variable, y = reorder(sample_id, Cluster), fill = Abundance)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-3, 3), space = "Lab",
name="Scaled\nAbundance") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Species", y = "Sample", title = "Heatmap of Fish Species Abundance by Cluster")
numeric_data_scaled <- scale(numeric_data)
distance_matrix <- dist(numeric_data_scaled, method = "euclidean")
hc <- hclust(distance_matrix)
clusters <- cutree(hc, k = 5) # for example, creating 5 clusters
plot(hc)
ggplot(long_data, aes(x = Species, y = reorder(sample_id, Cluster), fill = Abundance)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-3, 3), space = "Lab",
name="Scaled\nAbundance") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Species", y = "Sample", title = "Heatmap of Fish Species Abundance by Cluster")
numeric_data_scaled <- scale(numeric_data)
distance_matrix <- dist(numeric_data_scaled, method = "euclidean")
hc <- hclust(distance_matrix)
clusters <- cutree(hc, k = 5) # for example, creating 5 clusters
plot(hc)
numeric_data_scaled$Cluster <- as.factor(clusters)
long_data <- melt(numeric_data_scaled, id.vars = "Cluster")
ggplot(long_data, aes(x = Species, y = reorder(sample_id, Cluster), fill = Abundance)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-3, 3), space = "Lab",
name="Scaled\nAbundance") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Species", y = "Sample", title = "Heatmap of Fish Species Abundance by Cluster")
